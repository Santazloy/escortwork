from flask import Flask, request, jsonify, send_from_directory
from flask_cors import CORS
import os
from werkzeug.utils import secure_filename
import logging
from bot import send_application

app = Flask(__name__, static_folder='.', static_url_path='')
CORS(app)  # –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è frontend

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
UPLOAD_FOLDER = 'uploads'
ALLOWED_PHOTO_EXTENSIONS = {'png', 'jpg', 'jpeg', 'heic'}
ALLOWED_VIDEO_EXTENSIONS = {'mp4', 'mov', 'avi'}
MAX_FILE_SIZE = 100 * 1024 * 1024  # 100 MB

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)

app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
app.config['MAX_CONTENT_LENGTH'] = MAX_FILE_SIZE

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def allowed_file(filename, allowed_extensions):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞"""
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in allowed_extensions


@app.route('/api/submit', methods=['POST'])
def submit_application():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∫–µ—Ç—ã"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
        data = {
            'name': request.form.get('name'),
            'age': request.form.get('age'),
            'height': request.form.get('height'),
            'weight': request.form.get('weight'),
            'citizenship': request.form.get('citizenship'),
            'telegram': request.form.get('telegram'),
            'whatsapp': request.form.get('whatsapp'),
            'experience': request.form.get('experience'),
            'countries': request.form.get('countries')
        }

        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∞–Ω–∫–µ—Ç–∞ –æ—Ç: {data.get('name')}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
        photo_paths = []
        if 'photos' in request.files:
            photos = request.files.getlist('photos')
            for photo in photos:
                if photo and photo.filename and allowed_file(photo.filename, ALLOWED_PHOTO_EXTENSIONS):
                    filename = secure_filename(photo.filename)
                    # –î–æ–±–∞–≤–ª—è–µ–º timestamp –∫ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
                    import time
                    filename = f"{int(time.time())}_{filename}"
                    filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
                    photo.save(filepath)
                    photo_paths.append(filepath)
                    logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ñ–æ—Ç–æ: {filename}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ
        video_path = None
        if 'video' in request.files:
            video = request.files['video']
            if video and video.filename and allowed_file(video.filename, ALLOWED_VIDEO_EXTENSIONS):
                filename = secure_filename(video.filename)
                import time
                filename = f"{int(time.time())}_{filename}"
                filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
                video.save(filepath)
                video_path = filepath
                logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤–∏–¥–µ–æ: {filename}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        success = send_application(data, photo_paths, video_path)

        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        for photo_path in photo_paths:
            try:
                os.remove(photo_path)
            except:
                pass

        if video_path:
            try:
                os.remove(video_path)
            except:
                pass

        if success:
            return jsonify({
                'success': True,
                'message': '–ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!'
            }), 200
        else:
            return jsonify({
                'success': False,
                'message': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–Ω–∫–µ—Ç—ã'
            }), 500

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–Ω–∫–µ—Ç—ã: {e}")
        return jsonify({
            'success': False,
            'message': f'–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'
        }), 500


@app.route('/api/test', methods=['GET'])
def test():
    """–¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    return jsonify({
        'status': 'ok',
        'message': '–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç'
    })


@app.route('/')
def index():
    """–û—Ç–¥–∞—á–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    return send_from_directory('.', 'index.html')


@app.errorhandler(404)
def fallback(e):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ 404 –¥–ª—è SPA - –æ—Ç–¥–∞–µ–º index.html"""
    return send_from_directory('.', 'index.html'), 200


if __name__ == '__main__':
    port = int(os.getenv("PORT", 5000))
    print(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    print("üì± Telegram –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–Ω–∫–µ—Ç")
    app.run(host='0.0.0.0', port=port)